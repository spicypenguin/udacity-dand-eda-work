install.packages('RPresto')
library('DBI')
con <- dbConnect(
RPresto::Presto(),
host='http://socrates.data.internal.atlassian.com',
port=8081,
user=Sys.getenv('USER'),
)
con <- dbConnect(
RPresto::Presto(),
host='http://socrates.data.internal.atlassian.com',
port=8081,
user=Sys.getenv('USER'),
schema='hive',
catalog='default'
)
res <- dbSendQuery (con, 'select * from raw_product.ondemand_event_summary where date(date) > current_date - interval '7' day limit 10')
res <- dbSendQuery (con, 'select * from raw_product.ondemand_event_summary where date(date) > current_date - interval '7' day limit 10')
res <- dbSendQuery (con, 'select * from raw_product.ondemand_event_summary where date(date) > current_date - interval 7 day limit 10')
res <- dbSendQuery (con, "select * from raw_product.ondemand_event_summary where date(date) > current_date - interval '7' day limit 10")
while (!dbHasCompleted(res)) {
chunk <- dbFetch(res)
print(chunk)
}
print(res)
library('DBI')
con <- dbConnect(
RPresto::Presto(),
host='http://socrates.data.internal.atlassian.com',
port=8081,
user=Sys.getenv('USER'),
schema='hive',
catalog='default'
)
query <- "select * from raw_product.ondemand_event_summary where date(date) > current_date - interval '7' day limit 10"
res <- dbSendQuery(con, query)
# dbFetch without arguments only returns the current chunk, so we need to
# loop until the query completes.
while (!dbHasCompleted(res)) {
chunk <- dbFetch(res)
print(chunk)
}
con <- dbConnect(
RPresto::Presto(),
host='http://socrates.data.internal.atlassian.com',
port=8081,
user=Sys.getenv('USER'),
schema='default',
catalog='hive'
)
res <- dbSendQuery(con, query)
# dbFetch without arguments only returns the current chunk, so we need to
# loop until the query completes.
while (!dbHasCompleted(res)) {
chunk <- dbFetch(res)
print(chunk)
}
print(dbFetch(res, -1))
query <- "select event, product, instance, count from raw_product.ondemand_event_summary where date(date) > current_date - interval '7' day limit 10"
res <- dbSendQuery(con, query)
print(dbFetch(res, -1))
devtools::install_github('prestodb/RPresto')
package.install('devtools')
install.packages('devtools')
devtools::install_github('prestodb/RPresto')
library('DBI')
con <- dbConnect(
RPresto::Presto(),
host='http://socrates.data.internal.atlassian.com',
port=8081,
user=Sys.getenv('USER'),
schema='default',
catalog='hive'
)
query <- "select event, product, instance, count from raw_product.ondemand_event_summary where date(date) > current_date - interval '7' day limit 10"
res <- dbSendQuery(con, query)
print(dbFetch(res, -1))
query <- "select event, product, instance from raw_product.ondemand_event_summary where date(date) > current_date - interval '7' day limit 10"
res <- dbSendQuery(con, query)
print(dbFetch(res, -1))
proportionsTestForTwoCohorts(0.0536, 0.0773, 0.05)
proportionsTestForTwoCohorts <- function(baseline, variant, alpha) {
# Prepare the data
successes <- c(length(which(baseline > 0)), length(which(variant > 0)))
counts <- c(length(baseline), length(variant))
# Proportions test
prop_result <- prop.test(successes, counts, conf.level = alpha, correct = FALSE)
baselineResult <- prop_result$estimate[1]
variantResult <- prop_result$estimate[2]
resultDifference <- (variantResult - baselineResult) / baselineResult
pValue <- prop_result$p.value
return(
list(
baselineResult=baselineResult,
variantResult=variantResult,
resultDifference=resultDifference,
pValue=pValue
)
)
}
proportionsTestForTwoCohorts(0.0536, 0.0773, 0.05)
proportionsTestForTwoCohorts(0.0536, 0.0773, 0.95)
proportionsTestForTwoCohorts(0.0536, 0.0773, alpha=0.95)
baseline = integer(815)
variation = integer(783)
aseline = integer(815-63)
varia
baseline = integer(815-63)
variation = integer(783-42)
variation = integer(815-63) + matrix(1, 1, 63)
variation = integer(815-63)
variation_success = matrix(1, 1, 63)
baseline = integer(783-42)
variation = number(815-63)
variation_success = matrix(1, 1, 63)
variation = numeric(815-63)
variation_success = matrix(1, 1, 63)
baseline = numeric(783-42)
baseline_success = matrix(1, 1, 42)
variation, variation_success
c(variation, variation_success)
proportionsTestForTwoCohorts(c(baseline, baseline_success), c(variation, variation_success), alpha=0.95)
variation = numeric(774-83)
variation_success = matrix(1, 1, 83)
baseline = numeric(802-61)
baseline_success = matrix(1, 1, 61)
proportionsTestForTwoCohorts(c(baseline, baseline_success), c(variation, variation_success), alpha=0.95)
variation = numeric(788-73)
variation_success = matrix(1, 1, 73)
baseline = numeric(802-61)
baseline_success = matrix(1, 1, 61)
proportionsTestForTwoCohorts(c(baseline, baseline_success), c(variation, variation_success), alpha=0.95)
variation = numeric(787-76)
variation_success = matrix(1, 1, 76)
baseline = numeric(802-61)
baseline_success = matrix(1, 1, 61)
proportionsTestForTwoCohorts(c(baseline, baseline_success), c(variation, variation_success), alpha=0.95)
install.packages('scales')
library(scales)
library(ggplot2)
library(GGally)
library(memisc)
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
cuberoot_trans <- function() trans_new('cuberoot', transform = function(x) x^(1/3), inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=1/2) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=1/2, size=3/4) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=1/2, size=3/4, position='jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(color=clarity, alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(aes(color=clarity), alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(aes(color=cut), alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(aes(color=cut), alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(aes(color=color), alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(aes(color=color), alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color',
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data=diamonds)
m2 <- update(m1, ~ . + carat)
m2 <- update(m1, ~ . + carat)
m2 <- update(m2, ~ . + cut)
m2 <- update(m3, ~ . + color)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data=diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
install.packages('RCurl')
install.packages('bitops')
library(RCurl)
library(bitops)
diamondsurl = getBinaryURL('https://raw.github.com/solomonm/diamonds~data/master/BigDiamonds.Rda')
load(rawConnection(diamondsurl))
setwd('~/Repos/personal/data_analyst_nanodegree/exploratory-data-analysis')
load(rawConnection(diamondsurl))
data <- load(rawConnection(diamondsurl))
data <- load("BigDiamonds.Rda")
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data=data)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data=data)
summary(data)
diamonds_data <- load("BigDiamonds.Rda")
summary(diamonds_data)
diamonds_data <- load.csv("BigDiamonds.Rda")
diamonds_data <- load("BigDiamonds.Rda")
